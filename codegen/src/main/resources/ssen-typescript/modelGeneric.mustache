import { parseGenericModelJson, jsonifyGenericModel } from '@rocket-scripts/openapi';

{{#hasImports}}
import {
  {{#imports}}
  {{{.}}},
  from{{.}}Json,
  to{{.}}Json,
  {{/imports}}
} from './';
{{/hasImports}}

{{#discriminator}}
  import {
  {{#discriminator.mappedModels}}
    from{{modelName}}Json{{^-last}},{{/-last}}
  {{/discriminator.mappedModels}}
  } from './';
{{/discriminator}}

/**
 * {{#lambda.indented_star_1}}{{{unescapedDescription}}}{{/lambda.indented_star_1}}
 * @interface {{classname}}
 */
export interface {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
  {{#additionalPropertiesType}}
  [key: string]: {{{additionalPropertiesType}}}{{#hasVars}} | any{{/hasVars}};
  {{/additionalPropertiesType}}

  {{#vars}}
  /**
   * {{#lambda.indented_star_4}}{{{unescapedDescription}}}{{/lambda.indented_star_4}}
   * @type {{=<% %>=}}{<%&datatype%>}<%={{ }}=%>
   * @memberof {{classname}}
   */
  {{#isReadOnly}}readonly {{/isReadOnly}}{{name}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};

  {{/vars}}
}

{{#hasVars}}
const options = {
  {{#parent}}
  parent: { from: from{{{parent}}}Json, to: to{{{parent}}}Json },
  {{/parent}}
  properties: {
    names: {
      {{#vars}}
      '{{baseName}}': '{{name}}',
      {{/vars}}
    },
    baseNames: {
      {{#vars}}
      '{{name}}': '{{baseName}}',
      {{/vars}}
    },
    date: new Set<string>([
      {{#vars}}
      {{#isDate}}{{baseName}},{{/isDate}}
      {{/vars}}
    ]),
    dateTime: new Set<string>([
      {{#vars}}
      {{#isDateTime}}{{baseName}},{{/isDateTime}}
      {{/vars}}
    ]),
    required: new Set<string>([
      {{#vars}}
      {{#required}}{{baseName}},{{/required}}
      {{/vars}}
    ]),
    nullable: new Set<string>([
      {{#vars}}
      {{#isNullable}}{{baseName}},{{/isNullable}}
      {{/vars}}
    ]),
    listContainer: {
      {{#vars}}
      {{#isListContainer}}'{{baseName}}': { from: from{{#items}}{{datatype}}{{/items}}Json, to: to{{#items}}{{datatype}}{{/items}}Json },{{/isListContainer}}
      {{/vars}}
    },
    mapContainer: {
      {{#vars}}
      {{#isMapContainer}}'{{baseName}}': { from: from{{#items}}{{datatype}}{{/items}}Json, to: to{{#items}}{{datatype}}{{/items}}Json },{{/isMapContainer}}
      {{/vars}}
    },
    map: {
      {{#vars}}
      {{^isPrimitiveType}}{{#isListContainer}}{{#isMapContainer}}'{{baseName}}': { from: from{{#items}}{{datatype}}{{/items}}Json, to: to{{#items}}{{datatype}}{{/items}}Json },{{/isMapContainer}}{{/isListContainer}}{{/isPrimitiveType}}
      {{/vars}}
    },
  }
};
{{/hasVars}}

export function from{{classname}}Json<T extends ({{classname}} | undefined | null)>(json: unknown, ignoreDiscriminator: boolean = false): T {
  {{#hasVars}}

  {{#discriminator}}
  if (!ignoreDiscriminator) {
    {{#discriminator.mappedModels}}
    if (json['{{discriminator.propertyBaseName}}'] === '{{mappingName}}') {
      return from{{modelName}}Json(json, true);
    }
    {{/discriminator.mappedModels}}
  }
  {{/discriminator}}

  return parseGenericModelJson<T>(json, options);

  {{/hasVars}}

  {{^hasVars}}
    return json as {{classname}};
  {{/hasVars}}
}

export function to{{classname}}Json(value?: {{classname}} | null): any {
  {{#hasVars}}
    return jsonifyGenericModel(value, options);
  {{/hasVars}}

  {{^hasVars}}
    return value;
  {{/hasVars}}
}

{{#hasEnums}}
{{#vars}}
{{#isEnum}}
/**
 * @enum {string}
 */
export enum {{classname}}{{enumName}} {
  {{#allowableValues}}
  {{#enumVars}}
  {{{name}}} = {{{value}}},
  {{/enumVars}}
  {{/allowableValues}}
};
{{/isEnum}}
{{/vars}}
{{/hasEnums}}

// {{classname}}:
//    title: {{title}}
//    description: {{description}}, parentModel: {{parentModel}}
//    dataType: {{dataType}}, simpleType: {{simpleType}}
//    {{#vars}}
//
//    {{baseName}}:
//       dataType: {{dataType}}, baseType: {{baseType}}, containerType: {{containerType}}, simpleType: {{simpleType}}
//       isAnyType: {{isAnyType}}, isBinary: {{isBinary}}, isBoolean: {{isBoolean}}, isByteArray: {{isByteArray}}, isDate: {{isDate}},
//       isDateTime: {{isDateTime}}, isDefault: {{isDefault}}, isDouble: {{isDouble}}, isEmail: {{isEmail}}, isFile: {{isFile}}, isFloat: {{isFloat}},
//       isFreeFormObject: {{isFreeFormObject}}, isInteger: {{isInteger}}, isListContainer: {{isListContainer}}, isLong: {{isLong}}, isMapContainer: {{isMapContainer}},
//       isModel: {{isModel}}, isNumber: {{isNumber}}, isNumeric: {{isNumeric}}, isString: {{isString}}, isUuid: {{isUuid}}
//    {{/vars}}