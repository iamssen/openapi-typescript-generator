{{>licenseInfo}}
import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  collectionFormats,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
{{#imports.0}}
import type {
  {{#imports}}
  {{className}},
  {{/imports}}
} from '../models';
{{/imports.0}}
{{#hasModel}}
import { typeSerializer } from '../models';
{{/hasModel}}

/* eslint-disable */

{{#operations}}
{{! interface NameRequestParameters }}
{{#operation}}
{{#allParams.0}}
export interface {{operationIdCamelCase}}RequestParameters {
  {{#allParams}}
  {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
  {{/allParams}}
}
{{/allParams.0}}
{{/operation}}

{{#operation}}

{{! function nameRequest() }}
/**
 {{#notes}}
 * {{&notes}}
 {{/notes}}
 {{#summary}}
 * {{&summary}}
 {{/summary}}
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const {{nickname}}Request = ({
    basePath = '',
    querystringStringify = querystring,
    username,
    password,
    apiKey,
    accessToken,
    headers,
    credentials,
  }: RequestConfiguration = {}) =>
  ({{#allParams.0}}requestParameters: {{operationIdCamelCase}}RequestParameters{{/allParams.0}}): FetchParameters => {
  {{! check required }}
  {{#allParams}}
  {{#required}}
  if (requestParameters.{{paramName}} === null || requestParameters.{{paramName}} === undefined) {
    throw new APIRequestError(`Required parameter requestParameters.{{paramName}} was null or undefined when calling {{nickname}}.`);
  }
  {{/required}}
  {{/allParams}}

  {{! query }}
  const queryParameters: UrlQueryInput = {};

  {{#queryParams}}
  {{#isListContainer}}
  if (requestParameters.{{paramName}}) {
    {{#isCollectionFormatMulti}}
    queryParameters['{{baseName}}'] = requestParameters.{{paramName}};
    {{/isCollectionFormatMulti}}
    {{^isCollectionFormatMulti}}
    queryParameters['{{baseName}}'] = requestParameters.{{paramName}}.join(collectionFormats["{{collectionFormat}}"]);
    {{/isCollectionFormatMulti}}
  }
  {{/isListContainer}}
  {{^isListContainer}}
  if (requestParameters.{{paramName}} !== undefined) {
    {{#isDateTime}}
    queryParameters['{{baseName}}'] = (requestParameters.{{paramName}} as any).toISOString();
    {{/isDateTime}}
    {{^isDateTime}}
    {{#isDate}}
    queryParameters['{{baseName}}'] = (requestParameters.{{paramName}} as any).toISOString().substr(0,10);
    {{/isDate}}
    {{^isDate}}
    queryParameters['{{baseName}}'] = requestParameters.{{paramName}};
    {{/isDate}}
    {{/isDateTime}}
  }
  {{/isListContainer}}
  {{/queryParams}}

  {{! header }}
  const headerParameters: Headers = new Headers(headers);

  {{#bodyParam}}
  {{^consumes}}
  headerParameters.set('Content-Type', 'application/json');
  {{/consumes}}
  {{#consumes.0}}
  headerParameters.set('Content-Type', '{{{mediaType}}}');
  {{/consumes.0}}
  {{/bodyParam}}

  {{#headerParams}}
  {{#isListContainer}}
  if (requestParameters.{{paramName}}) {
    headerParameters.set('{{baseName}}', requestParameters.{{paramName}}.join(collectionFormats["{{collectionFormat}}"]));
  }
  {{/isListContainer}}
  {{^isListContainer}}
  if (requestParameters.{{paramName}} !== undefined && requestParameters.{{paramName}} !== null) {
    headerParameters.set('{{baseName}}'], String(requestParameters.{{paramName}}));
  }
  {{/isListContainer}}
  {{/headerParams}}

  {{#authMethods}}

  {{#isBasic}}
  {{#isBasicBasic}}
  if (username !== undefined || password !== undefined) {
    headerParameters.set('Authorization', 'Basic ' + btoa(username + ":" + password);
  }
  {{/isBasicBasic}}
  {{#isBasicBearer}}
  if (accessToken) {
    const tokenString = typeof accessToken === 'function'
                    ? accessToken("{{name}}", [{{#scopes}}"{{{scope}}}"{{^-last}}, {{/-last}}{{/scopes}}])
                    : accessToken;

    if (tokenString) {
      headerParameters.set('Authorization', `Bearer ${tokenString}`);
    }
  }
  {{/isBasicBearer}}
  {{/isBasic}}

  {{#isApiKey}}
  {{#isKeyInHeader}}
  if (apiKey) {
    headerParameters.set('{{keyParamName}}', apiKey("{{keyParamName}}")); // {{name}} authentication
  }
  {{/isKeyInHeader}}
  {{#isKeyInQuery}}
  if (apiKey) {
    queryParameters["{{keyParamName}}"] = apiKey("{{keyParamName}}"); // {{name}} authentication
  }
  {{/isKeyInQuery}}
  {{/isApiKey}}

  {{#isOAuth}}
  if (accessToken) {
    // oauth required
    if (typeof accessToken === 'function') {
      headerParameters.set('Authorization', accessToken("{{name}}", [{{#scopes}}"{{{scope}}}"{{^-last}}, {{/-last}}{{/scopes}}]));
    } else {
      headerParameters.set('Authorization', accessToken);
    }
  }
  {{/isOAuth}}
  {{/authMethods}}

  {{! form }}
  {{#hasFormParams}}
  const consumes: runtime.Consume[] = [
    {{#consumes}}
    { contentType: '{{{mediaType}}}' },
    {{/consumes}}
  ];
  // @ts-ignore: canConsumeForm may be unused
  const canConsumeForm = runtime.canConsumeForm(consumes);

  let formParams: { append(param: string, value: any): any };
  let useForm = false;

  {{#formParams}}
  {{#isFile}}
  // use FormData to transmit files using content-type "multipart/form-data"
  useForm = canConsumeForm;
  {{/isFile}}
  {{/formParams}}

  if (useForm) {
      formParams = new FormData();
  } else {
      formParams = new URLSearchParams();
  }

  {{#formParams}}
  {{#isListContainer}}
  if (requestParameters.{{paramName}}) {
    {{#isCollectionFormatMulti}}
    requestParameters.{{paramName}}.forEach((element) => {
      formParams.append('{{baseName}}', element as any);
    })
    {{/isCollectionFormatMulti}}
    {{^isCollectionFormatMulti}}
    formParams.append('{{baseName}}', requestParameters.{{paramName}}.join(collectionFormats["{{collectionFormat}}"]));
    {{/isCollectionFormatMulti}}
  }

  {{/isListContainer}}
  {{^isListContainer}}
  if (requestParameters.{{paramName}} !== undefined) {
    formParams.append('{{baseName}}', requestParameters.{{paramName}} as any);
  }
  {{/isListContainer}}
  {{/formParams}}
  {{/hasFormParams}}

  let url: string = `${basePath.replace(/\/+$/, '')}{{{path}}}`{{#pathParams}}.replace(`{${"{{baseName}}"}}`, encodeURIComponent(String(requestParameters.{{paramName}}))){{/pathParams}};
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  {{#hasBodyParam}}
  {{#bodyParam}}
  {{#isContainer}}
  const body = JSON.stringify(requestParameters.{{paramName}}{{#isListContainer}}{{#items}}{{^isPrimitiveType}}?.map(typeSerializer.toJsonObject('{{datatype}}')){{/isPrimitiveType}}{{/items}}{{/isListContainer}});
  {{/isContainer}}
  {{^isContainer}}
  {{^isPrimitiveType}}
  const body = JSON.stringify(typeSerializer.toJsonObject('{{dataType}}')(requestParameters.{{paramName}}));
  {{/isPrimitiveType}}
  {{#isPrimitiveType}}
  const body = requestParameters.{{paramName}} as any;
  {{/isPrimitiveType}}
  {{/isContainer}}
  {{/bodyParam}}
  {{/hasBodyParam}}
  {{#hasFormParams}}
  const body = formParams;
  {{/hasFormParams}}
  {{^hasBodyParam}}{{^hasFormParams}}
  const body = undefined;
  {{/hasFormParams}}{{/hasBodyParam}}

  return {
    input: url,
    init: {
      method: '{{httpMethod}}',
      headers: headerParameters,
      credentials,
      body,
    },
  };
}

/**
 {{#notes}}
 * {{&notes}}
 {{/notes}}
 {{#summary}}
 * {{&summary}}
 {{/summary}}
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const {{nickname}}Response = (configuration: ResponseConfiguration = {}) => async (response: Response): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}> => {
  if (response.status >= 200 && response.status < 300) {
    {{#returnType}}
    {{#isResponseFile}}
    return response.blob();
    {{/isResponseFile}}
    {{^isResponseFile}}
    {{#returnTypeIsPrimitive}}
    {{#isMapContainer}}
    return response.json();
    {{/isMapContainer}}
    {{#isListContainer}}
    return response.json();
    {{/isListContainer}}
    {{#returnSimpleType}}
    return response.text().then(value => value as any);
    {{/returnSimpleType}}
    {{/returnTypeIsPrimitive}}
    {{^returnTypeIsPrimitive}}
    {{#isListContainer}}
    return response.json().then(typeSerializer.toValueObjectList('{{returnBaseType}}'));
    {{/isListContainer}}
    {{^isListContainer}}
    {{#isMapContainer}}
    return response.json().then(typeSerializer.toValueObjectMap('{{returnBaseType}}'));
    {{/isMapContainer}}
    {{^isMapContainer}}
    return response.json().then(typeSerializer.toValueObject('{{returnBaseType}}'));
    {{/isMapContainer}}
    {{/isListContainer}}
    {{/returnTypeIsPrimitive}}
    {{/isResponseFile}}
    {{/returnType}}
  } else {
    switch (response.status.toString()) {
      {{#responses}}
      {{^is2xx}}
      {{#baseType}}
      case '{{code}}': // {{message}}
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('{{baseType}}')(await response.json()),
          message: `{{message}}`,
          response,
        });
      {{/baseType}}
      {{/is2xx}}
      {{/responses}}
      default:
        throw response;
    }
  }
}

/**
 {{#notes}}
 * {{&notes}}
 {{/notes}}
 {{#summary}}
 * {{&summary}}
 {{/summary}}
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function {{nickname}}({{#allParams.0}}requestParameters: {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}RequestParameters, {{/allParams.0}}configuration: OperationConfiguration = {}): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}> {
  return pipe(
    {{nickname}}Request(configuration),
    fetchRequest(configuration),
    {{nickname}}Response(configuration),
  )({{#allParams.0}}requestParameters{{/allParams.0}});
}
{{/operation}}

{{! enum NameEnum }}
{{#hasEnums}}
{{#operation}}
{{#allParams}}
{{#isEnum}}
/**
 * @export
 * @enum {string}
 */
export enum {{operationIdCamelCase}}{{enumName}} {
  {{#allowableValues}}
  {{#enumVars}}
  {{{name}}} = {{{value}}},
  {{/enumVars}}
  {{/allowableValues}}
}
{{/isEnum}}
{{/allParams}}
{{/operation}}
{{/hasEnums}}
{{/operations}}