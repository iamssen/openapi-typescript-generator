/**
 * JSON CRUD API
 * JSON CRUD API Description
 *
 * The version of the OpenAPI document: 1.0.0
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  collectionFormats,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
import type { Doc, Exception, NewDoc, Success } from '../models';
import { typeSerializer } from '../runtime';

/* eslint-disable */

export interface DocsDocIdDeleteRequestParameters {
  docId: number;
}
export interface DocsDocIdGetRequestParameters {
  docId: number;
}
export interface DocsDocIdPutRequestParameters {
  docId: number;
  doc: Doc;
}
export interface DocsNewPostRequestParameters {
  newDoc: NewDoc;
}

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const docsDocIdDeleteRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: DocsDocIdDeleteRequestParameters,
): FetchParameters => {
  if (
    requestParameters.docId === null ||
    requestParameters.docId === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.docId was null or undefined when calling docsDocIdDelete.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  let url: string = `${basePath.replace(/\/+$/, '')}/docs/{docId}`.replace(
    `{${'docId'}}`,
    encodeURIComponent(String(requestParameters.docId)),
  );
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'DELETE',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const docsDocIdDeleteResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Success> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('Success'));
  } else {
    switch (response.status.toString()) {
      case '400': // 400 bad request
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('Exception')(
            await response.json(),
          ),
          message: `400 bad request`,
          response,
        });
      case '401': // 401 unauthorized
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('Exception')(
            await response.json(),
          ),
          message: `401 unauthorized`,
          response,
        });
      case '404': // 404 not found
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('Exception')(
            await response.json(),
          ),
          message: `404 not found`,
          response,
        });
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function docsDocIdDelete(
  requestParameters: DocsDocIdDeleteRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<Success> {
  return pipe(
    docsDocIdDeleteRequest(configuration),
    fetchRequest(configuration),
    docsDocIdDeleteResponse(configuration),
  )(requestParameters);
}

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const docsDocIdGetRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: DocsDocIdGetRequestParameters,
): FetchParameters => {
  if (
    requestParameters.docId === null ||
    requestParameters.docId === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.docId was null or undefined when calling docsDocIdGet.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  let url: string = `${basePath.replace(/\/+$/, '')}/docs/{docId}`.replace(
    `{${'docId'}}`,
    encodeURIComponent(String(requestParameters.docId)),
  );
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const docsDocIdGetResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Doc> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('Doc'));
  } else {
    switch (response.status.toString()) {
      case '400': // 400 bad request
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('Exception')(
            await response.json(),
          ),
          message: `400 bad request`,
          response,
        });
      case '401': // 401 unauthorized
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('Exception')(
            await response.json(),
          ),
          message: `401 unauthorized`,
          response,
        });
      case '404': // 404 not found
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('Exception')(
            await response.json(),
          ),
          message: `404 not found`,
          response,
        });
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function docsDocIdGet(
  requestParameters: DocsDocIdGetRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<Doc> {
  return pipe(
    docsDocIdGetRequest(configuration),
    fetchRequest(configuration),
    docsDocIdGetResponse(configuration),
  )(requestParameters);
}

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const docsDocIdPutRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: DocsDocIdPutRequestParameters,
): FetchParameters => {
  if (
    requestParameters.docId === null ||
    requestParameters.docId === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.docId was null or undefined when calling docsDocIdPut.`,
    );
  }
  if (requestParameters.doc === null || requestParameters.doc === undefined) {
    throw new APIRequestError(
      `Required parameter requestParameters.doc was null or undefined when calling docsDocIdPut.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(/\/+$/, '')}/docs/{docId}`.replace(
    `{${'docId'}}`,
    encodeURIComponent(String(requestParameters.docId)),
  );
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = JSON.stringify(
    typeSerializer.toJsonObject('Doc')(requestParameters.doc),
  );

  return {
    input: url,
    init: {
      method: 'PUT',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const docsDocIdPutResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Doc> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('Doc'));
  } else {
    switch (response.status.toString()) {
      case '400': // 400 bad request
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('Exception')(
            await response.json(),
          ),
          message: `400 bad request`,
          response,
        });
      case '401': // 401 unauthorized
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('Exception')(
            await response.json(),
          ),
          message: `401 unauthorized`,
          response,
        });
      case '404': // 404 not found
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('Exception')(
            await response.json(),
          ),
          message: `404 not found`,
          response,
        });
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function docsDocIdPut(
  requestParameters: DocsDocIdPutRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<Doc> {
  return pipe(
    docsDocIdPutRequest(configuration),
    fetchRequest(configuration),
    docsDocIdPutResponse(configuration),
  )(requestParameters);
}

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const docsNewPostRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: DocsNewPostRequestParameters,
): FetchParameters => {
  if (
    requestParameters.newDoc === null ||
    requestParameters.newDoc === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.newDoc was null or undefined when calling docsNewPost.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(/\/+$/, '')}/docs/new`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = JSON.stringify(
    typeSerializer.toJsonObject('NewDoc')(requestParameters.newDoc),
  );

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const docsNewPostResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Doc> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('Doc'));
  } else {
    switch (response.status.toString()) {
      case '400': // 400 bad request
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('Exception')(
            await response.json(),
          ),
          message: `400 bad request`,
          response,
        });
      case '401': // 401 unauthorized
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('Exception')(
            await response.json(),
          ),
          message: `401 unauthorized`,
          response,
        });
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function docsNewPost(
  requestParameters: DocsNewPostRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<Doc> {
  return pipe(
    docsNewPostRequest(configuration),
    fetchRequest(configuration),
    docsNewPostResponse(configuration),
  )(requestParameters);
}
