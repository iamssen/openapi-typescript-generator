/**
 * Basic
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
import type { InlineResponse200 } from '../models';
import { typeSerializer } from '../models';

/* eslint-disable */

///**
// *
// */
//export namespace defaultApi {

/**
 */
export const sampleGetRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  let url: string = `${basePath.replace(/\/+$/, '')}/sample`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError}
 * @throws {APISerializeError}
 */
export const sampleGetResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<InlineResponse200> => {
  if (response.status >= 200 && response.status < 300) {
    return response
      .json()
      .then(typeSerializer.toValueObject('InlineResponse200'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIExceptionError}
 * @throws {APISerializeError}
 */
export async function sampleGet(
  configuration: OperationConfiguration = {},
): Promise<InlineResponse200> {
  return pipe(
    sampleGetRequest(configuration),
    fetchRequest(configuration),
    sampleGetResponse(configuration),
  )();
}

//}

// sampleGet:
//
//    code: 200, is1xx: false, is2xx: true, is3xx: false, is4xx: false, is5xx: false
//    message: successful operation
//    dataType: InlineResponse200, baseType: InlineResponse200, containerType: , simpleType: true
//    isAnyType: false, isBinary: false, isBoolean: false, isByteArray: false, isDate: false,
//    isDateTime: false, isDefault: false, isDouble: false, isEmail: false, isFile: false, isFloat: false,
//    isFreeFormObject: false, isInteger: false, isListContainer: false, isLong: false, isMapContainer: false,
//    isModel: true, isNumber: false, isNumeric: false, isString: false, isUuid: false
//
