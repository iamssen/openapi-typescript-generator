/**
 * Scala Client API Integration Test
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  collectionFormats,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
import type { Person } from '../models';
import { typeSerializer } from '../runtime';

/* eslint-disable */

export interface GetPeopleRequestParameters {
  age?: number;
}
export interface GetPersonByIdRequestParameters {
  personId: number;
}
export interface SavePeopleRequestParameters {
  body: Array<Person>;
  size?: number;
}

/**
 * People listing
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getPeopleRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: GetPeopleRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  if (requestParameters.age !== undefined) {
    queryParameters['age'] = requestParameters.age;
  }

  const headerParameters: Headers = new Headers(headers);

  let url: string = `${basePath.replace(/\/+$/, '')}/people`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * People listing
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getPeopleResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Array<Person>> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObjectList('Person'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * People listing
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function getPeople(
  requestParameters: GetPeopleRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<Array<Person>> {
  return pipe(
    getPeopleRequest(configuration),
    fetchRequest(configuration),
    getPeopleResponse(configuration),
  )(requestParameters);
}

/**
 * Retrieves a single person record by personId
 * get people by id
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getPersonByIdRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: GetPersonByIdRequestParameters,
): FetchParameters => {
  if (
    requestParameters.personId === null ||
    requestParameters.personId === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.personId was null or undefined when calling getPersonById.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  let url: string = `${basePath.replace(/\/+$/, '')}/people/{personId}`.replace(
    `{${'personId'}}`,
    encodeURIComponent(String(requestParameters.personId)),
  );
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Retrieves a single person record by personId
 * get people by id
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getPersonByIdResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Person> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('Person'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Retrieves a single person record by personId
 * get people by id
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function getPersonById(
  requestParameters: GetPersonByIdRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<Person> {
  return pipe(
    getPersonByIdRequest(configuration),
    fetchRequest(configuration),
    getPersonByIdResponse(configuration),
  )(requestParameters);
}

/**
 * People batch save
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const savePeopleRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: SavePeopleRequestParameters,
): FetchParameters => {
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new APIRequestError(
      `Required parameter requestParameters.body was null or undefined when calling savePeople.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  if (requestParameters.size !== undefined) {
    queryParameters['size'] = requestParameters.size;
  }

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(/\/+$/, '')}/people`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = JSON.stringify(
    requestParameters.body?.map(typeSerializer.toJsonObject('Person')),
  );

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * People batch save
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const savePeopleResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Array<Person>> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObjectList('Person'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * People batch save
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function savePeople(
  requestParameters: SavePeopleRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<Array<Person>> {
  return pipe(
    savePeopleRequest(configuration),
    fetchRequest(configuration),
    savePeopleResponse(configuration),
  )(requestParameters);
}
