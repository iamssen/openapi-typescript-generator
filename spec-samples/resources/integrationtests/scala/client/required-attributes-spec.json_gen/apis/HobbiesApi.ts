/**
 * Scala Client API Integration Test
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  collectionFormats,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
import type { Hobby } from '../models';
import { typeSerializer } from '../runtime';

/* eslint-disable */

export interface GetHobbiesRequestParameters {
  s?: string;
  _class?: string;
  i?: number;
  l?: number;
  bool?: boolean;
  f?: number;
  d?: number;
  datetime?: Date;
  date?: Date;
  b?: string;
  bin?: Blob;
}

/**
 * Query hobbies with some additional optional meaningless parameters
 * Get hobbies
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getHobbiesRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: GetHobbiesRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  if (requestParameters.s !== undefined) {
    queryParameters['s'] = requestParameters.s;
  }
  if (requestParameters._class !== undefined) {
    queryParameters['class'] = requestParameters._class;
  }
  if (requestParameters.i !== undefined) {
    queryParameters['i'] = requestParameters.i;
  }
  if (requestParameters.l !== undefined) {
    queryParameters['l'] = requestParameters.l;
  }
  if (requestParameters.bool !== undefined) {
    queryParameters['bool'] = requestParameters.bool;
  }
  if (requestParameters.f !== undefined) {
    queryParameters['f'] = requestParameters.f;
  }
  if (requestParameters.d !== undefined) {
    queryParameters['d'] = requestParameters.d;
  }
  if (requestParameters.datetime !== undefined) {
    queryParameters[
      'datetime'
    ] = (requestParameters.datetime as any).toISOString();
  }
  if (requestParameters.date !== undefined) {
    queryParameters[
      'date'
    ] = (requestParameters.date as any).toISOString().substr(0, 10);
  }
  if (requestParameters.b !== undefined) {
    queryParameters['b'] = requestParameters.b;
  }
  if (requestParameters.bin !== undefined) {
    queryParameters['bin'] = requestParameters.bin;
  }

  const headerParameters: Headers = new Headers(headers);

  let url: string = `${basePath.replace(/\/+$/, '')}/hobbies`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Query hobbies with some additional optional meaningless parameters
 * Get hobbies
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getHobbiesResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Hobby> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('Hobby'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Query hobbies with some additional optional meaningless parameters
 * Get hobbies
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function getHobbies(
  requestParameters: GetHobbiesRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<Hobby> {
  return pipe(
    getHobbiesRequest(configuration),
    fetchRequest(configuration),
    getHobbiesResponse(configuration),
  )(requestParameters);
}
