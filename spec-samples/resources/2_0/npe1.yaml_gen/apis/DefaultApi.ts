/**
 * Application
 * App
 *
 * The version of the OpenAPI document: 1.0.0
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  collectionFormats,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
import type { ResourceRequest } from '../models';
import { typeSerializer } from '../runtime';

/* eslint-disable */

export interface ResourceStatusSetRequestParameters {
  id: number;
  exclusive?: boolean;
  body?: ResourceRequest;
}

/**
 * Post a Resource status set for a specific resource Id
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const resourceStatusSetRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: ResourceStatusSetRequestParameters,
): FetchParameters => {
  if (requestParameters.id === null || requestParameters.id === undefined) {
    throw new APIRequestError(
      `Required parameter requestParameters.id was null or undefined when calling resourceStatusSet.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  if (requestParameters.exclusive !== undefined) {
    queryParameters['exclusive'] = requestParameters.exclusive;
  }

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/default/Resources/{id}`.replace(
    `{${'id'}}`,
    encodeURIComponent(String(requestParameters.id)),
  );
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = JSON.stringify(
    typeSerializer.toJsonObject('ResourceRequest')(requestParameters.body),
  );

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Post a Resource status set for a specific resource Id
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const resourceStatusSetResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Post a Resource status set for a specific resource Id
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function resourceStatusSet(
  requestParameters: ResourceStatusSetRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    resourceStatusSetRequest(configuration),
    fetchRequest(configuration),
    resourceStatusSetResponse(configuration),
  )(requestParameters);
}
