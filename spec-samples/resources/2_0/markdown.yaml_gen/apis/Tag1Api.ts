/**
 * An *API* with more **Markdown** in summary, description, and other text
 * Not really a *pseudo-randum* number generator API. This API uses [Markdown](http://daringfireball.net/projects/markdown/syntax) in text: 1. in this API description 1. in operation summaries 1. in operation descriptions 1. in schema (model) titles and descriptions 1. in schema (model) member descriptions
 *
 * The version of the OpenAPI document: 0.1.0
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  collectionFormats,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
import type { RandomNumber } from '../models';
import { typeSerializer } from '../runtime';

/* eslint-disable */

export interface GetRandomNumberRequestParameters {
  seed: string;
}

/**
 * Return a single *random* result from a given seed
 * A single *random* result
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getRandomNumberRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: GetRandomNumberRequestParameters,
): FetchParameters => {
  if (requestParameters.seed === null || requestParameters.seed === undefined) {
    throw new APIRequestError(
      `Required parameter requestParameters.seed was null or undefined when calling getRandomNumber.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  if (requestParameters.seed !== undefined) {
    queryParameters['seed'] = requestParameters.seed;
  }

  const headerParameters: Headers = new Headers(headers);

  if (apiKey) {
    headerParameters.set('api_key', apiKey('api_key')); // apiKey authentication
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/random`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Return a single *random* result from a given seed
 * A single *random* result
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getRandomNumberResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<RandomNumber> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('RandomNumber'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Return a single *random* result from a given seed
 * A single *random* result
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function getRandomNumber(
  requestParameters: GetRandomNumberRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<RandomNumber> {
  return pipe(
    getRandomNumberRequest(configuration),
    fetchRequest(configuration),
    getRandomNumberResponse(configuration),
  )(requestParameters);
}
