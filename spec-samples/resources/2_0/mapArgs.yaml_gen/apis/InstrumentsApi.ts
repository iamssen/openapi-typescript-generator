/**
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.190
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  collectionFormats,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
import type {
  InstrumentDefinition,
  LusidProblemDetails,
  LusidValidationProblemDetails,
  UpsertInstrumentsResponse,
} from '../models';
import { typeSerializer } from '../runtime';

/* eslint-disable */

export interface UpsertInstrumentsRequestParameters {
  requests?: { [key: string]: InstrumentDefinition };
}

/**
 * Upsert instruments
 * Upsert instruments
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const upsertInstrumentsRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: UpsertInstrumentsRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  if (accessToken) {
    // oauth required
    if (typeof accessToken === 'function') {
      headerParameters.set('Authorization', accessToken('oauth2', []));
    } else {
      headerParameters.set('Authorization', accessToken);
    }
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/api/instruments`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = JSON.stringify(requestParameters.requests);

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Upsert instruments
 * Upsert instruments
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const upsertInstrumentsResponse = (
  configuration: ResponseConfiguration = {},
) => async (
  response: Response,
): Promise<{ [key: string]: UpsertInstrumentsResponse }> => {
  if (response.status >= 200 && response.status < 300) {
    return response
      .json()
      .then(typeSerializer.toValueObjectMap('UpsertInstrumentsResponse'));
  } else {
    switch (response.status.toString()) {
      case '400': // The details of the input related failure
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject(
            'LusidValidationProblemDetails',
          )(await response.json()),
          message: `The details of the input related failure`,
          response,
        });
      case '0': // Error response
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('LusidProblemDetails')(
            await response.json(),
          ),
          message: `Error response`,
          response,
        });
      default:
        throw response;
    }
  }
};

/**
 * Upsert instruments
 * Upsert instruments
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function upsertInstruments(
  requestParameters: UpsertInstrumentsRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<{ [key: string]: UpsertInstrumentsResponse }> {
  return pipe(
    upsertInstrumentsRequest(configuration),
    fetchRequest(configuration),
    upsertInstrumentsResponse(configuration),
  )(requestParameters);
}
