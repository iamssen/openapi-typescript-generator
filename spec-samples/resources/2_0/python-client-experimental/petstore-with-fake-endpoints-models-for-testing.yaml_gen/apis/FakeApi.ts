/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  collectionFormats,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
import type {
  Animal,
  Client,
  FileSchemaTestClass,
  ObjectModelWithRefProps,
  StringEnum,
  User,
  XmlItem,
} from '../models';
import { typeSerializer } from '../runtime';

/* eslint-disable */

export interface BooleanRequestParameters {
  body?: boolean;
}
export interface ArrayModelRequestParameters {
  body?: Array<Animal>;
}
export interface CreateXmlItemRequestParameters {
  xmlItem: XmlItem;
}
export interface NumberWithValidationsRequestParameters {
  body?: number;
}
export interface ObjectModelWithRefPropsRequestParameters {
  body?: ObjectModelWithRefProps;
}
export interface StringRequestParameters {
  body?: string;
}
export interface StringEnumRequestParameters {
  body?: string;
}
export interface TestBodyWithFileSchemaRequestParameters {
  body: FileSchemaTestClass;
}
export interface TestBodyWithQueryParamsRequestParameters {
  query: string;
  body: User;
}
export interface TestClientModelRequestParameters {
  body: Client;
}
export interface TestEndpointEnumsLengthOneRequestParameters {
  queryInteger: TestEndpointEnumsLengthOneQueryIntegerEnum;
  queryString: TestEndpointEnumsLengthOneQueryStringEnum;
  pathString: TestEndpointEnumsLengthOnePathStringEnum;
  pathInteger: TestEndpointEnumsLengthOnePathIntegerEnum;
  headerNumber: TestEndpointEnumsLengthOneHeaderNumberEnum;
}
export interface TestEndpointParametersRequestParameters {
  number: number;
  _double: number;
  patternWithoutDelimiter: string;
  _byte: string;
  integer?: number;
  int32?: number;
  int64?: number;
  _float?: number;
  string?: string;
  binary?: Blob;
  date?: Date;
  dateTime?: Date;
  password?: string;
  callback?: string;
}
export interface TestEnumParametersRequestParameters {
  enumHeaderStringArray?: Array<TestEnumParametersEnumHeaderStringArrayEnum>;
  enumHeaderString?: TestEnumParametersEnumHeaderStringEnum;
  enumQueryStringArray?: Array<TestEnumParametersEnumQueryStringArrayEnum>;
  enumQueryString?: TestEnumParametersEnumQueryStringEnum;
  enumQueryInteger?: TestEnumParametersEnumQueryIntegerEnum;
  enumQueryDouble?: TestEnumParametersEnumQueryDoubleEnum;
  enumFormStringArray?: Array<TestEnumParametersEnumFormStringArrayEnum>;
  enumFormString?: TestEnumParametersEnumFormStringEnum;
}
export interface TestGroupParametersRequestParameters {
  requiredStringGroup: number;
  requiredBooleanGroup: boolean;
  requiredInt64Group: number;
  stringGroup?: number;
  booleanGroup?: boolean;
  int64Group?: number;
}
export interface TestInlineAdditionalPropertiesRequestParameters {
  param: { [key: string]: string };
}
export interface TestJsonFormDataRequestParameters {
  param: string;
  param2: string;
}

/**
 * Test serialization of outer boolean types
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const _booleanRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: BooleanRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(/\/+$/, '')}/fake/refs/boolean`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = requestParameters.body as any;

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Test serialization of outer boolean types
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const _booleanResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<boolean> => {
  if (response.status >= 200 && response.status < 300) {
    return response.text().then(typeSerializer.toValueObject('boolean'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Test serialization of outer boolean types
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function _boolean(
  requestParameters: BooleanRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<boolean> {
  return pipe(
    _booleanRequest(configuration),
    fetchRequest(configuration),
    _booleanResponse(configuration),
  )(requestParameters);
}

/**
 * Test serialization of ArrayModel
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const arrayModelRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: ArrayModelRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(/\/+$/, '')}/fake/refs/arraymodel`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = JSON.stringify(
    requestParameters.body?.map(typeSerializer.toJsonObject('Animal')),
  );

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Test serialization of ArrayModel
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const arrayModelResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Array<Animal>> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObjectList('Animal'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Test serialization of ArrayModel
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function arrayModel(
  requestParameters: ArrayModelRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<Array<Animal>> {
  return pipe(
    arrayModelRequest(configuration),
    fetchRequest(configuration),
    arrayModelResponse(configuration),
  )(requestParameters);
}

/**
 * this route creates an XmlItem
 * creates an XmlItem
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const createXmlItemRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: CreateXmlItemRequestParameters,
): FetchParameters => {
  if (
    requestParameters.xmlItem === null ||
    requestParameters.xmlItem === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.xmlItem was null or undefined when calling createXmlItem.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/xml');

  let url: string = `${basePath.replace(/\/+$/, '')}/fake/create_xml_item`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = JSON.stringify(
    typeSerializer.toJsonObject('XmlItem')(requestParameters.xmlItem),
  );

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * this route creates an XmlItem
 * creates an XmlItem
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const createXmlItemResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * this route creates an XmlItem
 * creates an XmlItem
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function createXmlItem(
  requestParameters: CreateXmlItemRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    createXmlItemRequest(configuration),
    fetchRequest(configuration),
    createXmlItemResponse(configuration),
  )(requestParameters);
}

/**
 * Test serialization of outer number types
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const numberWithValidationsRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: NumberWithValidationsRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(/\/+$/, '')}/fake/refs/number`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = requestParameters.body as any;

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Test serialization of outer number types
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const numberWithValidationsResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<number> => {
  if (response.status >= 200 && response.status < 300) {
    return response.text().then(typeSerializer.toValueObject('number'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Test serialization of outer number types
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function numberWithValidations(
  requestParameters: NumberWithValidationsRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<number> {
  return pipe(
    numberWithValidationsRequest(configuration),
    fetchRequest(configuration),
    numberWithValidationsResponse(configuration),
  )(requestParameters);
}

/**
 * Test serialization of object with $refed properties
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const objectModelWithRefPropsRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: ObjectModelWithRefPropsRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/fake/refs/object_model_with_ref_props`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = JSON.stringify(
    typeSerializer.toJsonObject('ObjectModelWithRefProps')(
      requestParameters.body,
    ),
  );

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Test serialization of object with $refed properties
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const objectModelWithRefPropsResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<ObjectModelWithRefProps> => {
  if (response.status >= 200 && response.status < 300) {
    return response
      .json()
      .then(typeSerializer.toValueObject('ObjectModelWithRefProps'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Test serialization of object with $refed properties
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function objectModelWithRefProps(
  requestParameters: ObjectModelWithRefPropsRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<ObjectModelWithRefProps> {
  return pipe(
    objectModelWithRefPropsRequest(configuration),
    fetchRequest(configuration),
    objectModelWithRefPropsResponse(configuration),
  )(requestParameters);
}

/**
 * Test serialization of outer string types
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const stringRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: StringRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(/\/+$/, '')}/fake/refs/string`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = requestParameters.body as any;

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Test serialization of outer string types
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const stringResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<string> => {
  if (response.status >= 200 && response.status < 300) {
    return response.text().then(typeSerializer.toValueObject('string'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Test serialization of outer string types
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function string(
  requestParameters: StringRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<string> {
  return pipe(
    stringRequest(configuration),
    fetchRequest(configuration),
    stringResponse(configuration),
  )(requestParameters);
}

/**
 * Test serialization of outer enum
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const stringEnumRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: StringEnumRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(/\/+$/, '')}/fake/refs/enum`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = requestParameters.body as any;

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Test serialization of outer enum
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const stringEnumResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<StringEnum> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('StringEnum'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Test serialization of outer enum
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function stringEnum(
  requestParameters: StringEnumRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<StringEnum> {
  return pipe(
    stringEnumRequest(configuration),
    fetchRequest(configuration),
    stringEnumResponse(configuration),
  )(requestParameters);
}

/**
 * For this test, the body for this request much reference a schema named `File`.
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testBodyWithFileSchemaRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: TestBodyWithFileSchemaRequestParameters,
): FetchParameters => {
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new APIRequestError(
      `Required parameter requestParameters.body was null or undefined when calling testBodyWithFileSchema.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/fake/body-with-file-schema`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = JSON.stringify(
    typeSerializer.toJsonObject('FileSchemaTestClass')(requestParameters.body),
  );

  return {
    input: url,
    init: {
      method: 'PUT',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * For this test, the body for this request much reference a schema named `File`.
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testBodyWithFileSchemaResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * For this test, the body for this request much reference a schema named `File`.
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function testBodyWithFileSchema(
  requestParameters: TestBodyWithFileSchemaRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    testBodyWithFileSchemaRequest(configuration),
    fetchRequest(configuration),
    testBodyWithFileSchemaResponse(configuration),
  )(requestParameters);
}

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testBodyWithQueryParamsRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: TestBodyWithQueryParamsRequestParameters,
): FetchParameters => {
  if (
    requestParameters.query === null ||
    requestParameters.query === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.query was null or undefined when calling testBodyWithQueryParams.`,
    );
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new APIRequestError(
      `Required parameter requestParameters.body was null or undefined when calling testBodyWithQueryParams.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  if (requestParameters.query !== undefined) {
    queryParameters['query'] = requestParameters.query;
  }

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/fake/body-with-query-params`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = JSON.stringify(
    typeSerializer.toJsonObject('User')(requestParameters.body),
  );

  return {
    input: url,
    init: {
      method: 'PUT',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testBodyWithQueryParamsResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function testBodyWithQueryParams(
  requestParameters: TestBodyWithQueryParamsRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    testBodyWithQueryParamsRequest(configuration),
    fetchRequest(configuration),
    testBodyWithQueryParamsResponse(configuration),
  )(requestParameters);
}

/**
 * To test \"client\" model
 * To test \"client\" model
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testClientModelRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: TestClientModelRequestParameters,
): FetchParameters => {
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new APIRequestError(
      `Required parameter requestParameters.body was null or undefined when calling testClientModel.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(/\/+$/, '')}/fake`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = JSON.stringify(
    typeSerializer.toJsonObject('Client')(requestParameters.body),
  );

  return {
    input: url,
    init: {
      method: 'PATCH',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * To test \"client\" model
 * To test \"client\" model
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testClientModelResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Client> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('Client'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * To test \"client\" model
 * To test \"client\" model
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function testClientModel(
  requestParameters: TestClientModelRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<Client> {
  return pipe(
    testClientModelRequest(configuration),
    fetchRequest(configuration),
    testClientModelResponse(configuration),
  )(requestParameters);
}

/**
 * This route has required values with enums of 1
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testEndpointEnumsLengthOneRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: TestEndpointEnumsLengthOneRequestParameters,
): FetchParameters => {
  if (
    requestParameters.queryInteger === null ||
    requestParameters.queryInteger === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.queryInteger was null or undefined when calling testEndpointEnumsLengthOne.`,
    );
  }
  if (
    requestParameters.queryString === null ||
    requestParameters.queryString === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.queryString was null or undefined when calling testEndpointEnumsLengthOne.`,
    );
  }
  if (
    requestParameters.pathString === null ||
    requestParameters.pathString === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.pathString was null or undefined when calling testEndpointEnumsLengthOne.`,
    );
  }
  if (
    requestParameters.pathInteger === null ||
    requestParameters.pathInteger === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.pathInteger was null or undefined when calling testEndpointEnumsLengthOne.`,
    );
  }
  if (
    requestParameters.headerNumber === null ||
    requestParameters.headerNumber === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.headerNumber was null or undefined when calling testEndpointEnumsLengthOne.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  if (requestParameters.queryInteger !== undefined) {
    queryParameters['query_integer'] = requestParameters.queryInteger;
  }
  if (requestParameters.queryString !== undefined) {
    queryParameters['query_string'] = requestParameters.queryString;
  }

  const headerParameters: Headers = new Headers(headers);

  if (
    requestParameters.headerNumber !== undefined &&
    requestParameters.headerNumber !== null
  ) {
    headerParameters.set(
      'header_number',
      String(requestParameters.headerNumber),
    );
  }

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/fake/enums-of-length-one/{path_string}/{path_integer}`
    .replace(
      `{${'path_string'}}`,
      encodeURIComponent(String(requestParameters.pathString)),
    )
    .replace(
      `{${'path_integer'}}`,
      encodeURIComponent(String(requestParameters.pathInteger)),
    );
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'PUT',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * This route has required values with enums of 1
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testEndpointEnumsLengthOneResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * This route has required values with enums of 1
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function testEndpointEnumsLengthOne(
  requestParameters: TestEndpointEnumsLengthOneRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    testEndpointEnumsLengthOneRequest(configuration),
    fetchRequest(configuration),
    testEndpointEnumsLengthOneResponse(configuration),
  )(requestParameters);
}

/**
 * Fake endpoint for testing various parameters  假端點  偽のエンドポイント  가짜 엔드 포인트
 * Fake endpoint for testing various parameters  假端點  偽のエンドポイント  가짜 엔드 포인트
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testEndpointParametersRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: TestEndpointParametersRequestParameters,
): FetchParameters => {
  if (
    requestParameters.number === null ||
    requestParameters.number === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.number was null or undefined when calling testEndpointParameters.`,
    );
  }
  if (
    requestParameters._double === null ||
    requestParameters._double === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters._double was null or undefined when calling testEndpointParameters.`,
    );
  }
  if (
    requestParameters.patternWithoutDelimiter === null ||
    requestParameters.patternWithoutDelimiter === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.patternWithoutDelimiter was null or undefined when calling testEndpointParameters.`,
    );
  }
  if (
    requestParameters._byte === null ||
    requestParameters._byte === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters._byte was null or undefined when calling testEndpointParameters.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  if (username !== undefined || password !== undefined) {
    headerParameters.set(
      'Authorization',
      'Basic ' + btoa(username + ':' + password),
    );
  }

  let formParams: FormData | URLSearchParams;
  let useForm = false;

  // use FormData to transmit files using content-type "multipart/form-data"
  useForm = [{ contentType: 'application/x-www-form-urlencoded' }].some(
    ({ contentType }) => contentType === 'multipart/form-data',
  );

  if (useForm) {
    formParams = new FormData();
  } else {
    formParams = new URLSearchParams();
  }

  if (requestParameters.integer !== undefined) {
    formParams.append('integer', requestParameters.integer as any);
  }
  if (requestParameters.int32 !== undefined) {
    formParams.append('int32', requestParameters.int32 as any);
  }
  if (requestParameters.int64 !== undefined) {
    formParams.append('int64', requestParameters.int64 as any);
  }
  if (requestParameters.number !== undefined) {
    formParams.append('number', requestParameters.number as any);
  }
  if (requestParameters._float !== undefined) {
    formParams.append('float', requestParameters._float as any);
  }
  if (requestParameters._double !== undefined) {
    formParams.append('double', requestParameters._double as any);
  }
  if (requestParameters.string !== undefined) {
    formParams.append('string', requestParameters.string as any);
  }
  if (requestParameters.patternWithoutDelimiter !== undefined) {
    formParams.append(
      'pattern_without_delimiter',
      requestParameters.patternWithoutDelimiter as any,
    );
  }
  if (requestParameters._byte !== undefined) {
    formParams.append('byte', requestParameters._byte as any);
  }
  if (requestParameters.binary !== undefined) {
    formParams.append('binary', requestParameters.binary as any);
  }
  if (requestParameters.date !== undefined) {
    formParams.append('date', requestParameters.date as any);
  }
  if (requestParameters.dateTime !== undefined) {
    formParams.append('dateTime', requestParameters.dateTime as any);
  }
  if (requestParameters.password !== undefined) {
    formParams.append('password', requestParameters.password as any);
  }
  if (requestParameters.callback !== undefined) {
    formParams.append('callback', requestParameters.callback as any);
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/fake`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = formParams;

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Fake endpoint for testing various parameters  假端點  偽のエンドポイント  가짜 엔드 포인트
 * Fake endpoint for testing various parameters  假端點  偽のエンドポイント  가짜 엔드 포인트
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testEndpointParametersResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Fake endpoint for testing various parameters  假端點  偽のエンドポイント  가짜 엔드 포인트
 * Fake endpoint for testing various parameters  假端點  偽のエンドポイント  가짜 엔드 포인트
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function testEndpointParameters(
  requestParameters: TestEndpointParametersRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    testEndpointParametersRequest(configuration),
    fetchRequest(configuration),
    testEndpointParametersResponse(configuration),
  )(requestParameters);
}

/**
 * To test enum parameters
 * To test enum parameters
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testEnumParametersRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: TestEnumParametersRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  if (requestParameters.enumQueryStringArray) {
    queryParameters[
      'enum_query_string_array'
    ] = requestParameters.enumQueryStringArray.join(collectionFormats['csv']);
  }
  if (requestParameters.enumQueryString !== undefined) {
    queryParameters['enum_query_string'] = requestParameters.enumQueryString;
  }
  if (requestParameters.enumQueryInteger !== undefined) {
    queryParameters['enum_query_integer'] = requestParameters.enumQueryInteger;
  }
  if (requestParameters.enumQueryDouble !== undefined) {
    queryParameters['enum_query_double'] = requestParameters.enumQueryDouble;
  }

  const headerParameters: Headers = new Headers(headers);

  if (requestParameters.enumHeaderStringArray) {
    headerParameters.set(
      'enum_header_string_array',
      requestParameters.enumHeaderStringArray.join(collectionFormats['csv']),
    );
  }
  if (
    requestParameters.enumHeaderString !== undefined &&
    requestParameters.enumHeaderString !== null
  ) {
    headerParameters.set(
      'enum_header_string',
      String(requestParameters.enumHeaderString),
    );
  }

  let formParams: FormData | URLSearchParams;
  let useForm = false;

  if (useForm) {
    formParams = new FormData();
  } else {
    formParams = new URLSearchParams();
  }

  if (requestParameters.enumFormStringArray) {
    formParams.append(
      'enum_form_string_array',
      requestParameters.enumFormStringArray.join(collectionFormats['csv']),
    );
  }

  if (requestParameters.enumFormString !== undefined) {
    formParams.append(
      'enum_form_string',
      requestParameters.enumFormString as any,
    );
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/fake`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = formParams;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * To test enum parameters
 * To test enum parameters
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testEnumParametersResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * To test enum parameters
 * To test enum parameters
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function testEnumParameters(
  requestParameters: TestEnumParametersRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    testEnumParametersRequest(configuration),
    fetchRequest(configuration),
    testEnumParametersResponse(configuration),
  )(requestParameters);
}

/**
 * Fake endpoint to test group parameters (optional)
 * Fake endpoint to test group parameters (optional)
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testGroupParametersRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: TestGroupParametersRequestParameters,
): FetchParameters => {
  if (
    requestParameters.requiredStringGroup === null ||
    requestParameters.requiredStringGroup === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.requiredStringGroup was null or undefined when calling testGroupParameters.`,
    );
  }
  if (
    requestParameters.requiredBooleanGroup === null ||
    requestParameters.requiredBooleanGroup === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.requiredBooleanGroup was null or undefined when calling testGroupParameters.`,
    );
  }
  if (
    requestParameters.requiredInt64Group === null ||
    requestParameters.requiredInt64Group === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.requiredInt64Group was null or undefined when calling testGroupParameters.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  if (requestParameters.requiredStringGroup !== undefined) {
    queryParameters['required_string_group'] =
      requestParameters.requiredStringGroup;
  }
  if (requestParameters.requiredInt64Group !== undefined) {
    queryParameters['required_int64_group'] =
      requestParameters.requiredInt64Group;
  }
  if (requestParameters.stringGroup !== undefined) {
    queryParameters['string_group'] = requestParameters.stringGroup;
  }
  if (requestParameters.int64Group !== undefined) {
    queryParameters['int64_group'] = requestParameters.int64Group;
  }

  const headerParameters: Headers = new Headers(headers);

  if (
    requestParameters.requiredBooleanGroup !== undefined &&
    requestParameters.requiredBooleanGroup !== null
  ) {
    headerParameters.set(
      'required_boolean_group',
      String(requestParameters.requiredBooleanGroup),
    );
  }
  if (
    requestParameters.booleanGroup !== undefined &&
    requestParameters.booleanGroup !== null
  ) {
    headerParameters.set(
      'boolean_group',
      String(requestParameters.booleanGroup),
    );
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/fake`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'DELETE',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Fake endpoint to test group parameters (optional)
 * Fake endpoint to test group parameters (optional)
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testGroupParametersResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Fake endpoint to test group parameters (optional)
 * Fake endpoint to test group parameters (optional)
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function testGroupParameters(
  requestParameters: TestGroupParametersRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    testGroupParametersRequest(configuration),
    fetchRequest(configuration),
    testGroupParametersResponse(configuration),
  )(requestParameters);
}

/**
 * test inline additionalProperties
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testInlineAdditionalPropertiesRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: TestInlineAdditionalPropertiesRequestParameters,
): FetchParameters => {
  if (
    requestParameters.param === null ||
    requestParameters.param === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.param was null or undefined when calling testInlineAdditionalProperties.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/fake/inline-additionalProperties`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = JSON.stringify(requestParameters.param);

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * test inline additionalProperties
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testInlineAdditionalPropertiesResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * test inline additionalProperties
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function testInlineAdditionalProperties(
  requestParameters: TestInlineAdditionalPropertiesRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    testInlineAdditionalPropertiesRequest(configuration),
    fetchRequest(configuration),
    testInlineAdditionalPropertiesResponse(configuration),
  )(requestParameters);
}

/**
 * test json serialization of form data
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testJsonFormDataRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: TestJsonFormDataRequestParameters,
): FetchParameters => {
  if (
    requestParameters.param === null ||
    requestParameters.param === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.param was null or undefined when calling testJsonFormData.`,
    );
  }
  if (
    requestParameters.param2 === null ||
    requestParameters.param2 === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.param2 was null or undefined when calling testJsonFormData.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  let formParams: FormData | URLSearchParams;
  let useForm = false;

  if (useForm) {
    formParams = new FormData();
  } else {
    formParams = new URLSearchParams();
  }

  if (requestParameters.param !== undefined) {
    formParams.append('param', requestParameters.param as any);
  }
  if (requestParameters.param2 !== undefined) {
    formParams.append('param2', requestParameters.param2 as any);
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/fake/jsonFormData`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = formParams;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * test json serialization of form data
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const testJsonFormDataResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * test json serialization of form data
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function testJsonFormData(
  requestParameters: TestJsonFormDataRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    testJsonFormDataRequest(configuration),
    fetchRequest(configuration),
    testJsonFormDataResponse(configuration),
  )(requestParameters);
}

/**
 * @export
 * @enum {string}
 */
export enum TestEndpointEnumsLengthOneQueryIntegerEnum {
  NUMBER_3 = 3,
}
/**
 * @export
 * @enum {string}
 */
export enum TestEndpointEnumsLengthOneQueryStringEnum {
  Brillig = 'brillig',
}
/**
 * @export
 * @enum {string}
 */
export enum TestEndpointEnumsLengthOnePathStringEnum {
  Hello = 'hello',
}
/**
 * @export
 * @enum {string}
 */
export enum TestEndpointEnumsLengthOnePathIntegerEnum {
  NUMBER_34 = 34,
}
/**
 * @export
 * @enum {string}
 */
export enum TestEndpointEnumsLengthOneHeaderNumberEnum {
  NUMBER_1_DOT_234 = 1.234,
}
/**
 * @export
 * @enum {string}
 */
export enum TestEnumParametersEnumHeaderStringArrayEnum {
  GreaterThan = '>',
  Dollar = '$',
}
/**
 * @export
 * @enum {string}
 */
export enum TestEnumParametersEnumHeaderStringEnum {
  Abc = '_abc',
  Efg = '-efg',
  Xyz = '(xyz)',
}
/**
 * @export
 * @enum {string}
 */
export enum TestEnumParametersEnumQueryStringArrayEnum {
  GreaterThan = '>',
  Dollar = '$',
}
/**
 * @export
 * @enum {string}
 */
export enum TestEnumParametersEnumQueryStringEnum {
  Abc = '_abc',
  Efg = '-efg',
  Xyz = '(xyz)',
}
/**
 * @export
 * @enum {string}
 */
export enum TestEnumParametersEnumQueryIntegerEnum {
  NUMBER_1 = 1,
  NUMBER_MINUS_2 = -2,
}
/**
 * @export
 * @enum {string}
 */
export enum TestEnumParametersEnumQueryDoubleEnum {
  NUMBER_1_DOT_1 = 1.1,
  NUMBER_MINUS_1_DOT_2 = -1.2,
}
/**
 * @export
 * @enum {string}
 */
export enum TestEnumParametersEnumFormStringArrayEnum {
  GreaterThan = '>',
  Dollar = '$',
}
/**
 * @export
 * @enum {string}
 */
export enum TestEnumParametersEnumFormStringEnum {
  Abc = '_abc',
  Efg = '-efg',
  Xyz = '(xyz)',
}
