/**
 * The Wordnik Public API
 * **Wordnik has an API, and you\'re invited.** The Wordnik API lets you request definitions, example sentences, spelling suggestions,  related words like synonyms and antonyms, phrases containing a given word, word  autocompletion, random words, words of the day, and much more
 *
 * The version of the OpenAPI document: 4.0.1
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  collectionFormats,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
import type {
  DefinitionSearchResults,
  WordObject,
  WordOfTheDay,
  WordSearchResults,
} from '../models';
import { typeSerializer } from '../runtime';

/* eslint-disable */

export interface GetRandomWordRequestParameters {
  hasDictionaryDef?: string;
  includePartOfSpeech?: string;
  excludePartOfSpeech?: string;
  minCorpusCount?: number;
  maxCorpusCount?: number;
  minDictionaryCount?: number;
  maxDictionaryCount?: number;
  minLength?: number;
  maxLength?: number;
}
export interface GetRandomWordsRequestParameters {
  hasDictionaryDef?: string;
  includePartOfSpeech?: string;
  excludePartOfSpeech?: string;
  minCorpusCount?: number;
  maxCorpusCount?: number;
  minDictionaryCount?: number;
  maxDictionaryCount?: number;
  minLength?: number;
  maxLength?: number;
  sortBy?: string;
  sortOrder?: string;
  limit?: number;
}
export interface GetWordOfTheDayRequestParameters {
  date?: string;
}
export interface ReverseDictionaryRequestParameters {
  query: string;
  findSenseForWord?: string;
  includeSourceDictionaries?: string;
  excludeSourceDictionaries?: string;
  includePartOfSpeech?: string;
  excludePartOfSpeech?: string;
  minCorpusCount?: number;
  maxCorpusCount?: number;
  minLength?: number;
  maxLength?: number;
  expandTerms?: string;
  includeTags?: string;
  sortBy?: string;
  sortOrder?: string;
  skip?: string;
  limit?: number;
}
export interface SearchWordsRequestParameters {
  query: string;
  caseSensitive?: string;
  includePartOfSpeech?: string;
  excludePartOfSpeech?: string;
  minCorpusCount?: number;
  maxCorpusCount?: number;
  minDictionaryCount?: number;
  maxDictionaryCount?: number;
  minLength?: number;
  maxLength?: number;
  skip?: number;
  limit?: number;
}

/**
 * Returns a single random WordObject
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getRandomWordRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: GetRandomWordRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  if (requestParameters.hasDictionaryDef !== undefined) {
    queryParameters['hasDictionaryDef'] = requestParameters.hasDictionaryDef;
  }
  if (requestParameters.includePartOfSpeech !== undefined) {
    queryParameters['includePartOfSpeech'] =
      requestParameters.includePartOfSpeech;
  }
  if (requestParameters.excludePartOfSpeech !== undefined) {
    queryParameters['excludePartOfSpeech'] =
      requestParameters.excludePartOfSpeech;
  }
  if (requestParameters.minCorpusCount !== undefined) {
    queryParameters['minCorpusCount'] = requestParameters.minCorpusCount;
  }
  if (requestParameters.maxCorpusCount !== undefined) {
    queryParameters['maxCorpusCount'] = requestParameters.maxCorpusCount;
  }
  if (requestParameters.minDictionaryCount !== undefined) {
    queryParameters['minDictionaryCount'] =
      requestParameters.minDictionaryCount;
  }
  if (requestParameters.maxDictionaryCount !== undefined) {
    queryParameters['maxDictionaryCount'] =
      requestParameters.maxDictionaryCount;
  }
  if (requestParameters.minLength !== undefined) {
    queryParameters['minLength'] = requestParameters.minLength;
  }
  if (requestParameters.maxLength !== undefined) {
    queryParameters['maxLength'] = requestParameters.maxLength;
  }

  const headerParameters: Headers = new Headers(headers);

  if (apiKey) {
    headerParameters.set('api_key', apiKey('api_key')); // apiKey authentication
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/words.json/randomWord`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Returns a single random WordObject
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getRandomWordResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<WordObject> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('WordObject'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Returns a single random WordObject
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function getRandomWord(
  requestParameters: GetRandomWordRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<WordObject> {
  return pipe(
    getRandomWordRequest(configuration),
    fetchRequest(configuration),
    getRandomWordResponse(configuration),
  )(requestParameters);
}

/**
 * Returns an array of random WordObjects
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getRandomWordsRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: GetRandomWordsRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  if (requestParameters.hasDictionaryDef !== undefined) {
    queryParameters['hasDictionaryDef'] = requestParameters.hasDictionaryDef;
  }
  if (requestParameters.includePartOfSpeech !== undefined) {
    queryParameters['includePartOfSpeech'] =
      requestParameters.includePartOfSpeech;
  }
  if (requestParameters.excludePartOfSpeech !== undefined) {
    queryParameters['excludePartOfSpeech'] =
      requestParameters.excludePartOfSpeech;
  }
  if (requestParameters.minCorpusCount !== undefined) {
    queryParameters['minCorpusCount'] = requestParameters.minCorpusCount;
  }
  if (requestParameters.maxCorpusCount !== undefined) {
    queryParameters['maxCorpusCount'] = requestParameters.maxCorpusCount;
  }
  if (requestParameters.minDictionaryCount !== undefined) {
    queryParameters['minDictionaryCount'] =
      requestParameters.minDictionaryCount;
  }
  if (requestParameters.maxDictionaryCount !== undefined) {
    queryParameters['maxDictionaryCount'] =
      requestParameters.maxDictionaryCount;
  }
  if (requestParameters.minLength !== undefined) {
    queryParameters['minLength'] = requestParameters.minLength;
  }
  if (requestParameters.maxLength !== undefined) {
    queryParameters['maxLength'] = requestParameters.maxLength;
  }
  if (requestParameters.sortBy !== undefined) {
    queryParameters['sortBy'] = requestParameters.sortBy;
  }
  if (requestParameters.sortOrder !== undefined) {
    queryParameters['sortOrder'] = requestParameters.sortOrder;
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit;
  }

  const headerParameters: Headers = new Headers(headers);

  if (apiKey) {
    headerParameters.set('api_key', apiKey('api_key')); // apiKey authentication
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/words.json/randomWords`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Returns an array of random WordObjects
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getRandomWordsResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Array<WordObject>> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObjectList('WordObject'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Returns an array of random WordObjects
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function getRandomWords(
  requestParameters: GetRandomWordsRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<Array<WordObject>> {
  return pipe(
    getRandomWordsRequest(configuration),
    fetchRequest(configuration),
    getRandomWordsResponse(configuration),
  )(requestParameters);
}

/**
 * Returns a specific WordOfTheDay
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getWordOfTheDayRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: GetWordOfTheDayRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  if (requestParameters.date !== undefined) {
    queryParameters['date'] = requestParameters.date;
  }

  const headerParameters: Headers = new Headers(headers);

  if (apiKey) {
    headerParameters.set('api_key', apiKey('api_key')); // apiKey authentication
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/words.json/wordOfTheDay`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Returns a specific WordOfTheDay
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getWordOfTheDayResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<WordOfTheDay> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('WordOfTheDay'));
  } else {
    switch (response.status.toString()) {
      case '0': // success
        throw new APIExceptionError({
          exception: typeSerializer.toValueObject('WordOfTheDay')(
            await response.json(),
          ),
          message: `success`,
          response,
        });
      default:
        throw response;
    }
  }
};

/**
 * Returns a specific WordOfTheDay
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function getWordOfTheDay(
  requestParameters: GetWordOfTheDayRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<WordOfTheDay> {
  return pipe(
    getWordOfTheDayRequest(configuration),
    fetchRequest(configuration),
    getWordOfTheDayResponse(configuration),
  )(requestParameters);
}

/**
 * Reverse dictionary search
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const reverseDictionaryRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: ReverseDictionaryRequestParameters,
): FetchParameters => {
  if (
    requestParameters.query === null ||
    requestParameters.query === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.query was null or undefined when calling reverseDictionary.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  if (requestParameters.query !== undefined) {
    queryParameters['query'] = requestParameters.query;
  }
  if (requestParameters.findSenseForWord !== undefined) {
    queryParameters['findSenseForWord'] = requestParameters.findSenseForWord;
  }
  if (requestParameters.includeSourceDictionaries !== undefined) {
    queryParameters['includeSourceDictionaries'] =
      requestParameters.includeSourceDictionaries;
  }
  if (requestParameters.excludeSourceDictionaries !== undefined) {
    queryParameters['excludeSourceDictionaries'] =
      requestParameters.excludeSourceDictionaries;
  }
  if (requestParameters.includePartOfSpeech !== undefined) {
    queryParameters['includePartOfSpeech'] =
      requestParameters.includePartOfSpeech;
  }
  if (requestParameters.excludePartOfSpeech !== undefined) {
    queryParameters['excludePartOfSpeech'] =
      requestParameters.excludePartOfSpeech;
  }
  if (requestParameters.minCorpusCount !== undefined) {
    queryParameters['minCorpusCount'] = requestParameters.minCorpusCount;
  }
  if (requestParameters.maxCorpusCount !== undefined) {
    queryParameters['maxCorpusCount'] = requestParameters.maxCorpusCount;
  }
  if (requestParameters.minLength !== undefined) {
    queryParameters['minLength'] = requestParameters.minLength;
  }
  if (requestParameters.maxLength !== undefined) {
    queryParameters['maxLength'] = requestParameters.maxLength;
  }
  if (requestParameters.expandTerms !== undefined) {
    queryParameters['expandTerms'] = requestParameters.expandTerms;
  }
  if (requestParameters.includeTags !== undefined) {
    queryParameters['includeTags'] = requestParameters.includeTags;
  }
  if (requestParameters.sortBy !== undefined) {
    queryParameters['sortBy'] = requestParameters.sortBy;
  }
  if (requestParameters.sortOrder !== undefined) {
    queryParameters['sortOrder'] = requestParameters.sortOrder;
  }
  if (requestParameters.skip !== undefined) {
    queryParameters['skip'] = requestParameters.skip;
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit;
  }

  const headerParameters: Headers = new Headers(headers);

  if (apiKey) {
    headerParameters.set('api_key', apiKey('api_key')); // apiKey authentication
  }

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/words.json/reverseDictionary`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Reverse dictionary search
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const reverseDictionaryResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<DefinitionSearchResults> => {
  if (response.status >= 200 && response.status < 300) {
    return response
      .json()
      .then(typeSerializer.toValueObject('DefinitionSearchResults'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Reverse dictionary search
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function reverseDictionary(
  requestParameters: ReverseDictionaryRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<DefinitionSearchResults> {
  return pipe(
    reverseDictionaryRequest(configuration),
    fetchRequest(configuration),
    reverseDictionaryResponse(configuration),
  )(requestParameters);
}

/**
 * Searches words
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const searchWordsRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: SearchWordsRequestParameters,
): FetchParameters => {
  if (
    requestParameters.query === null ||
    requestParameters.query === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.query was null or undefined when calling searchWords.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  if (requestParameters.caseSensitive !== undefined) {
    queryParameters['caseSensitive'] = requestParameters.caseSensitive;
  }
  if (requestParameters.includePartOfSpeech !== undefined) {
    queryParameters['includePartOfSpeech'] =
      requestParameters.includePartOfSpeech;
  }
  if (requestParameters.excludePartOfSpeech !== undefined) {
    queryParameters['excludePartOfSpeech'] =
      requestParameters.excludePartOfSpeech;
  }
  if (requestParameters.minCorpusCount !== undefined) {
    queryParameters['minCorpusCount'] = requestParameters.minCorpusCount;
  }
  if (requestParameters.maxCorpusCount !== undefined) {
    queryParameters['maxCorpusCount'] = requestParameters.maxCorpusCount;
  }
  if (requestParameters.minDictionaryCount !== undefined) {
    queryParameters['minDictionaryCount'] =
      requestParameters.minDictionaryCount;
  }
  if (requestParameters.maxDictionaryCount !== undefined) {
    queryParameters['maxDictionaryCount'] =
      requestParameters.maxDictionaryCount;
  }
  if (requestParameters.minLength !== undefined) {
    queryParameters['minLength'] = requestParameters.minLength;
  }
  if (requestParameters.maxLength !== undefined) {
    queryParameters['maxLength'] = requestParameters.maxLength;
  }
  if (requestParameters.skip !== undefined) {
    queryParameters['skip'] = requestParameters.skip;
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit;
  }

  const headerParameters: Headers = new Headers(headers);

  if (apiKey) {
    headerParameters.set('api_key', apiKey('api_key')); // apiKey authentication
  }

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/words.json/search/{query}`.replace(
    `{${'query'}}`,
    encodeURIComponent(String(requestParameters.query)),
  );
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Searches words
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const searchWordsResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<WordSearchResults> => {
  if (response.status >= 200 && response.status < 300) {
    return response
      .json()
      .then(typeSerializer.toValueObject('WordSearchResults'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Searches words
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function searchWords(
  requestParameters: SearchWordsRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<WordSearchResults> {
  return pipe(
    searchWordsRequest(configuration),
    fetchRequest(configuration),
    searchWordsResponse(configuration),
  )(requestParameters);
}
