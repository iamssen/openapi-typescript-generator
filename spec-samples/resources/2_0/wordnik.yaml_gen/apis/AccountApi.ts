/**
 * The Wordnik Public API
 * **Wordnik has an API, and you\'re invited.** The Wordnik API lets you request definitions, example sentences, spelling suggestions,  related words like synonyms and antonyms, phrases containing a given word, word  autocompletion, random words, words of the day, and much more
 *
 * The version of the OpenAPI document: 4.0.1
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  collectionFormats,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
import type {
  ApiTokenStatus,
  AuthenticationToken,
  User,
  WordList,
} from '../models';
import { typeSerializer } from '../runtime';

/* eslint-disable */

export interface AuthenticateRequestParameters {
  username: string;
  password: string;
}
export interface AuthenticatePostRequestParameters {
  username: string;
  body: string;
}
export interface GetApiTokenStatusRequestParameters {
  apiKey?: string;
}
export interface GetLoggedInUserRequestParameters {
  authToken: string;
}
export interface GetWordListsForLoggedInUserRequestParameters {
  authToken: string;
  skip?: number;
  limit?: number;
}

/**
 * Authenticates a User
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const authenticateRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: AuthenticateRequestParameters,
): FetchParameters => {
  if (
    requestParameters.username === null ||
    requestParameters.username === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.username was null or undefined when calling authenticate.`,
    );
  }
  if (
    requestParameters.password === null ||
    requestParameters.password === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.password was null or undefined when calling authenticate.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  if (requestParameters.password !== undefined) {
    queryParameters['password'] = requestParameters.password;
  }

  const headerParameters: Headers = new Headers(headers);

  if (apiKey) {
    headerParameters.set('api_key', apiKey('api_key')); // apiKey authentication
  }

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/account.json/authenticate/{username}`.replace(
    `{${'username'}}`,
    encodeURIComponent(String(requestParameters.username)),
  );
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Authenticates a User
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const authenticateResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<AuthenticationToken> => {
  if (response.status >= 200 && response.status < 300) {
    return response
      .json()
      .then(typeSerializer.toValueObject('AuthenticationToken'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Authenticates a User
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function authenticate(
  requestParameters: AuthenticateRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<AuthenticationToken> {
  return pipe(
    authenticateRequest(configuration),
    fetchRequest(configuration),
    authenticateResponse(configuration),
  )(requestParameters);
}

/**
 * Authenticates a user
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const authenticatePostRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: AuthenticatePostRequestParameters,
): FetchParameters => {
  if (
    requestParameters.username === null ||
    requestParameters.username === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.username was null or undefined when calling authenticatePost.`,
    );
  }
  if (requestParameters.body === null || requestParameters.body === undefined) {
    throw new APIRequestError(
      `Required parameter requestParameters.body was null or undefined when calling authenticatePost.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  if (apiKey) {
    headerParameters.set('api_key', apiKey('api_key')); // apiKey authentication
  }

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/account.json/authenticate/{username}`.replace(
    `{${'username'}}`,
    encodeURIComponent(String(requestParameters.username)),
  );
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = requestParameters.body as any;

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Authenticates a user
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const authenticatePostResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<AuthenticationToken> => {
  if (response.status >= 200 && response.status < 300) {
    return response
      .json()
      .then(typeSerializer.toValueObject('AuthenticationToken'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Authenticates a user
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function authenticatePost(
  requestParameters: AuthenticatePostRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<AuthenticationToken> {
  return pipe(
    authenticatePostRequest(configuration),
    fetchRequest(configuration),
    authenticatePostResponse(configuration),
  )(requestParameters);
}

/**
 * Returns usage statistics for the API account.
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getApiTokenStatusRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: GetApiTokenStatusRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  if (
    requestParameters.apiKey !== undefined &&
    requestParameters.apiKey !== null
  ) {
    headerParameters.set('api_key', String(requestParameters.apiKey));
  }

  if (apiKey) {
    headerParameters.set('api_key', apiKey('api_key')); // apiKey authentication
  }

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/account.json/apiTokenStatus`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Returns usage statistics for the API account.
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getApiTokenStatusResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<ApiTokenStatus> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('ApiTokenStatus'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Returns usage statistics for the API account.
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function getApiTokenStatus(
  requestParameters: GetApiTokenStatusRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<ApiTokenStatus> {
  return pipe(
    getApiTokenStatusRequest(configuration),
    fetchRequest(configuration),
    getApiTokenStatusResponse(configuration),
  )(requestParameters);
}

/**
 * Requires a valid auth_token to be set.
 * Returns the logged-in User
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getLoggedInUserRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: GetLoggedInUserRequestParameters,
): FetchParameters => {
  if (
    requestParameters.authToken === null ||
    requestParameters.authToken === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.authToken was null or undefined when calling getLoggedInUser.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  if (
    requestParameters.authToken !== undefined &&
    requestParameters.authToken !== null
  ) {
    headerParameters.set('auth_token', String(requestParameters.authToken));
  }

  if (apiKey) {
    headerParameters.set('api_key', apiKey('api_key')); // apiKey authentication
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/account.json/user`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Requires a valid auth_token to be set.
 * Returns the logged-in User
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getLoggedInUserResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<User> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('User'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Requires a valid auth_token to be set.
 * Returns the logged-in User
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function getLoggedInUser(
  requestParameters: GetLoggedInUserRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<User> {
  return pipe(
    getLoggedInUserRequest(configuration),
    fetchRequest(configuration),
    getLoggedInUserResponse(configuration),
  )(requestParameters);
}

/**
 * Fetches WordList objects for the logged-in user.
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getWordListsForLoggedInUserRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: GetWordListsForLoggedInUserRequestParameters,
): FetchParameters => {
  if (
    requestParameters.authToken === null ||
    requestParameters.authToken === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.authToken was null or undefined when calling getWordListsForLoggedInUser.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  if (requestParameters.skip !== undefined) {
    queryParameters['skip'] = requestParameters.skip;
  }
  if (requestParameters.limit !== undefined) {
    queryParameters['limit'] = requestParameters.limit;
  }

  const headerParameters: Headers = new Headers(headers);

  if (
    requestParameters.authToken !== undefined &&
    requestParameters.authToken !== null
  ) {
    headerParameters.set('auth_token', String(requestParameters.authToken));
  }

  if (apiKey) {
    headerParameters.set('api_key', apiKey('api_key')); // apiKey authentication
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/account.json/wordLists`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Fetches WordList objects for the logged-in user.
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getWordListsForLoggedInUserResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Array<WordList>> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObjectList('WordList'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Fetches WordList objects for the logged-in user.
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function getWordListsForLoggedInUser(
  requestParameters: GetWordListsForLoggedInUserRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<Array<WordList>> {
  return pipe(
    getWordListsForLoggedInUserRequest(configuration),
    fetchRequest(configuration),
    getWordListsForLoggedInUserResponse(configuration),
  )(requestParameters);
}
