/**
 * Elm generator test
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  collectionFormats,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
import type { Maybe } from '../models';
import { typeSerializer } from '../runtime';

/* eslint-disable */

export interface HeaderPostRequestParameters {
  string: string;
  integer?: number;
  headerType?: HeaderPostHeaderTypeEnum;
}
export interface PathStringIntegerEnumerationGetRequestParameters {
  string: string;
  integer: number;
  enumeration: PathStringIntegerEnumerationGetEnumerationEnum;
}
export interface QueryGetRequestParameters {
  string?: string;
  _int?: number;
  _enum?: QueryGetEnumEnum;
}
export interface UuidGetRequestParameters {
  value?: string;
}

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const headerPostRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: HeaderPostRequestParameters,
): FetchParameters => {
  if (
    requestParameters.string === null ||
    requestParameters.string === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.string was null or undefined when calling headerPost.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  if (
    requestParameters.string !== undefined &&
    requestParameters.string !== null
  ) {
    headerParameters.set('string', String(requestParameters.string));
  }
  if (
    requestParameters.integer !== undefined &&
    requestParameters.integer !== null
  ) {
    headerParameters.set('integer', String(requestParameters.integer));
  }
  if (
    requestParameters.headerType !== undefined &&
    requestParameters.headerType !== null
  ) {
    headerParameters.set('headerType', String(requestParameters.headerType));
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/header`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const headerPostResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<string> => {
  if (response.status >= 200 && response.status < 300) {
    return response.text().then(typeSerializer.toValueObject('string'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function headerPost(
  requestParameters: HeaderPostRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<string> {
  return pipe(
    headerPostRequest(configuration),
    fetchRequest(configuration),
    headerPostResponse(configuration),
  )(requestParameters);
}

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const maybeGetRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  let url: string = `${basePath.replace(/\/+$/, '')}/maybe`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const maybeGetResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Maybe> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('Maybe'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function maybeGet(
  configuration: OperationConfiguration = {},
): Promise<Maybe> {
  return pipe(
    maybeGetRequest(configuration),
    fetchRequest(configuration),
    maybeGetResponse(configuration),
  )();
}

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const pathStringIntegerEnumerationGetRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: PathStringIntegerEnumerationGetRequestParameters,
): FetchParameters => {
  if (
    requestParameters.string === null ||
    requestParameters.string === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.string was null or undefined when calling pathStringIntegerEnumerationGet.`,
    );
  }
  if (
    requestParameters.integer === null ||
    requestParameters.integer === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.integer was null or undefined when calling pathStringIntegerEnumerationGet.`,
    );
  }
  if (
    requestParameters.enumeration === null ||
    requestParameters.enumeration === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.enumeration was null or undefined when calling pathStringIntegerEnumerationGet.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/path/{string}/{integer}/{enumeration}`
    .replace(
      `{${'string'}}`,
      encodeURIComponent(String(requestParameters.string)),
    )
    .replace(
      `{${'integer'}}`,
      encodeURIComponent(String(requestParameters.integer)),
    )
    .replace(
      `{${'enumeration'}}`,
      encodeURIComponent(String(requestParameters.enumeration)),
    );
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const pathStringIntegerEnumerationGetResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function pathStringIntegerEnumerationGet(
  requestParameters: PathStringIntegerEnumerationGetRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    pathStringIntegerEnumerationGetRequest(configuration),
    fetchRequest(configuration),
    pathStringIntegerEnumerationGetResponse(configuration),
  )(requestParameters);
}

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const queryGetRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: QueryGetRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  if (requestParameters.string !== undefined) {
    queryParameters['string'] = requestParameters.string;
  }
  if (requestParameters._int !== undefined) {
    queryParameters['int'] = requestParameters._int;
  }
  if (requestParameters._enum !== undefined) {
    queryParameters['enum'] = requestParameters._enum;
  }

  const headerParameters: Headers = new Headers(headers);

  let url: string = `${basePath.replace(/\/+$/, '')}/query`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const queryGetResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function queryGet(
  requestParameters: QueryGetRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    queryGetRequest(configuration),
    fetchRequest(configuration),
    queryGetResponse(configuration),
  )(requestParameters);
}

/**
 * Secured endpoint
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const securedPostRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  if (accessToken) {
    const tokenString =
      typeof accessToken === 'function'
        ? accessToken('BearerAuth', [])
        : accessToken;

    if (tokenString) {
      headerParameters.set('Authorization', `Bearer ${tokenString}`);
    }
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/secured`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * Secured endpoint
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const securedPostResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * Secured endpoint
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function securedPost(
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    securedPostRequest(configuration),
    fetchRequest(configuration),
    securedPostResponse(configuration),
  )();
}

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const uuidGetRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: UuidGetRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  if (requestParameters.value !== undefined) {
    queryParameters['value'] = requestParameters.value;
  }

  const headerParameters: Headers = new Headers(headers);

  let url: string = `${basePath.replace(/\/+$/, '')}/uuid`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const uuidGetResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<string> => {
  if (response.status >= 200 && response.status < 300) {
    return response.text().then(typeSerializer.toValueObject('string'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function uuidGet(
  requestParameters: UuidGetRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<string> {
  return pipe(
    uuidGetRequest(configuration),
    fetchRequest(configuration),
    uuidGetResponse(configuration),
  )(requestParameters);
}

/**
 * @export
 * @enum {string}
 */
export enum HeaderPostHeaderTypeEnum {
  Left = 'left',
  Right = 'right',
}
/**
 * @export
 * @enum {string}
 */
export enum PathStringIntegerEnumerationGetEnumerationEnum {
  A = 'a',
  B = 'b',
  C = 'c',
}
/**
 * @export
 * @enum {string}
 */
export enum QueryGetEnumEnum {
  A = 'a',
  B = 'b',
  C = 'c',
}
