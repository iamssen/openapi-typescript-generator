/* eslint-disable */
/**
 * Test for Kotlin reserved words
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import { TypeSerializer } from '@rocket-scripts/openapi';

import { AsModel } from './models/As';
import { BreakModel } from './models/Break';
import { ClassModel } from './models/Class';
import { ContinueModel } from './models/Continue';
import { DoModel } from './models/Do';
import { ElseModel } from './models/Else';
import { FalseModel } from './models/False';
import { ForModel } from './models/For';
import { FunModel } from './models/Fun';
import { GoodModel } from './models/Good';
import { IfModel } from './models/If';
import { InModel } from './models/In';
import { InterfaceModel } from './models/Interface';
import { IsModel } from './models/Is';
import { LinkedModel } from './models/Linked';
import { ModelObjectModel } from './models/ModelObject';
import { NullModel } from './models/Null';
import { PackageModel } from './models/Package';
import { ReturnModel } from './models/Return';
import { SuperModel } from './models/Super';
import { ThisModel } from './models/This';
import { ThrowModel } from './models/Throw';
import { TrueModel } from './models/True';
import { TryModel } from './models/Try';
import { TypealiasModel } from './models/Typealias';
import { TypeofModel } from './models/Typeof';
import { ValModel } from './models/Val';
import { VarModel } from './models/Var';
import { WhenModel } from './models/When';
import { WhileModel } from './models/While';

export const typeSerializer = new TypeSerializer({
  As: AsModel,
  Break: BreakModel,
  Class: ClassModel,
  Continue: ContinueModel,
  Do: DoModel,
  Else: ElseModel,
  False: FalseModel,
  For: ForModel,
  Fun: FunModel,
  Good: GoodModel,
  If: IfModel,
  In: InModel,
  Interface: InterfaceModel,
  Is: IsModel,
  Linked: LinkedModel,
  ModelObject: ModelObjectModel,
  Null: NullModel,
  Package: PackageModel,
  Return: ReturnModel,
  Super: SuperModel,
  This: ThisModel,
  Throw: ThrowModel,
  True: TrueModel,
  Try: TryModel,
  Typealias: TypealiasModel,
  Typeof: TypeofModel,
  Val: ValModel,
  Var: VarModel,
  When: WhenModel,
  While: WhileModel,
});
