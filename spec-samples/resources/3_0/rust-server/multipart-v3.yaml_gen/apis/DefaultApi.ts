/**
 * Multipart OpenAPI V3 Rust Server Test
 * API under test
 *
 * The version of the OpenAPI document: 1.0.7
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  collectionFormats,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
import type { MultipartRequestObjectField } from '../models';
import { typeSerializer } from '../runtime';

/* eslint-disable */

export interface MultipartRelatedRequestPostRequestParameters {
  requiredBinaryField: Blob;
  objectField?: MultipartRequestObjectField;
  optionalBinaryField?: Blob;
}
export interface MultipartRequestPostRequestParameters {
  stringField: string;
  binaryField: string;
  optionalStringField?: string;
  objectField?: MultipartRequestObjectField;
}
export interface MultipleIdenticalMimeTypesPostRequestParameters {
  binary1?: Blob;
  binary2?: Blob;
}

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const multipartRelatedRequestPostRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: MultipartRelatedRequestPostRequestParameters,
): FetchParameters => {
  if (
    requestParameters.requiredBinaryField === null ||
    requestParameters.requiredBinaryField === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.requiredBinaryField was null or undefined when calling multipartRelatedRequestPost.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  let formParams: FormData | URLSearchParams;
  let useForm = false;

  // use FormData to transmit files using content-type "multipart/form-data"
  useForm = [{ contentType: 'multipart/related' }].some(
    ({ contentType }) => contentType === 'multipart/form-data',
  );
  // use FormData to transmit files using content-type "multipart/form-data"
  useForm = [{ contentType: 'multipart/related' }].some(
    ({ contentType }) => contentType === 'multipart/form-data',
  );

  if (useForm) {
    formParams = new FormData();
  } else {
    formParams = new URLSearchParams();
  }

  if (requestParameters.objectField !== undefined) {
    formParams.append('object_field', requestParameters.objectField as any);
  }
  if (requestParameters.optionalBinaryField !== undefined) {
    formParams.append(
      'optional_binary_field',
      requestParameters.optionalBinaryField as any,
    );
  }
  if (requestParameters.requiredBinaryField !== undefined) {
    formParams.append(
      'required_binary_field',
      requestParameters.requiredBinaryField as any,
    );
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/multipart_related_request`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = formParams;

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const multipartRelatedRequestPostResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function multipartRelatedRequestPost(
  requestParameters: MultipartRelatedRequestPostRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    multipartRelatedRequestPostRequest(configuration),
    fetchRequest(configuration),
    multipartRelatedRequestPostResponse(configuration),
  )(requestParameters);
}

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const multipartRequestPostRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: MultipartRequestPostRequestParameters,
): FetchParameters => {
  if (
    requestParameters.stringField === null ||
    requestParameters.stringField === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.stringField was null or undefined when calling multipartRequestPost.`,
    );
  }
  if (
    requestParameters.binaryField === null ||
    requestParameters.binaryField === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.binaryField was null or undefined when calling multipartRequestPost.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  let formParams: FormData | URLSearchParams;
  let useForm = false;

  if (useForm) {
    formParams = new FormData();
  } else {
    formParams = new URLSearchParams();
  }

  if (requestParameters.stringField !== undefined) {
    formParams.append('string_field', requestParameters.stringField as any);
  }
  if (requestParameters.optionalStringField !== undefined) {
    formParams.append(
      'optional_string_field',
      requestParameters.optionalStringField as any,
    );
  }
  if (requestParameters.objectField !== undefined) {
    formParams.append('object_field', requestParameters.objectField as any);
  }
  if (requestParameters.binaryField !== undefined) {
    formParams.append('binary_field', requestParameters.binaryField as any);
  }

  let url: string = `${basePath.replace(/\/+$/, '')}/multipart_request`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = formParams;

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const multipartRequestPostResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function multipartRequestPost(
  requestParameters: MultipartRequestPostRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    multipartRequestPostRequest(configuration),
    fetchRequest(configuration),
    multipartRequestPostResponse(configuration),
  )(requestParameters);
}

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const multipleIdenticalMimeTypesPostRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: MultipleIdenticalMimeTypesPostRequestParameters,
): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  let formParams: FormData | URLSearchParams;
  let useForm = false;

  // use FormData to transmit files using content-type "multipart/form-data"
  useForm = [{ contentType: 'multipart/related' }].some(
    ({ contentType }) => contentType === 'multipart/form-data',
  );
  // use FormData to transmit files using content-type "multipart/form-data"
  useForm = [{ contentType: 'multipart/related' }].some(
    ({ contentType }) => contentType === 'multipart/form-data',
  );

  if (useForm) {
    formParams = new FormData();
  } else {
    formParams = new URLSearchParams();
  }

  if (requestParameters.binary1 !== undefined) {
    formParams.append('binary1', requestParameters.binary1 as any);
  }
  if (requestParameters.binary2 !== undefined) {
    formParams.append('binary2', requestParameters.binary2 as any);
  }

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/multiple-identical-mime-types`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = formParams;

  return {
    input: url,
    init: {
      method: 'POST',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const multipleIdenticalMimeTypesPostResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<void> => {
  if (response.status >= 200 && response.status < 300) {
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function multipleIdenticalMimeTypesPost(
  requestParameters: MultipleIdenticalMimeTypesPostRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<void> {
  return pipe(
    multipleIdenticalMimeTypesPostRequest(configuration),
    fetchRequest(configuration),
    multipleIdenticalMimeTypesPostResponse(configuration),
  )(requestParameters);
}
