/**
 * time@work rest api
 * internal rest api, used by time@work angular client
 *
 * The version of the OpenAPI document: 0.1
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

import type {
  UrlQueryInput,
  OperationConfiguration,
  RequestConfiguration,
  ResponseConfiguration,
  FetchParameters,
} from '@rocket-scripts/openapi';
import {
  pipe,
  collectionFormats,
  querystring,
  fetchRequest,
  APIRequestError,
  APIExceptionError,
} from '@rocket-scripts/openapi';
import type { CTeamMember, WorkWeek } from '../models';
import { typeSerializer } from '../runtime';

/* eslint-disable */

export interface GetWorkWeekRequestParameters {
  fromIsoDateString: string;
}
export interface UpdateWorkWeekRequestParameters {
  fromIsoDateString: string;
  workWeek?: WorkWeek;
}

/**
 * retrieving all known users.
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getTeamMembersRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (): FetchParameters => {
  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  let url: string = `${basePath.replace(/\/+$/, '')}/rest/teammember`;
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * retrieving all known users.
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getTeamMembersResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<Array<CTeamMember>> => {
  if (response.status >= 200 && response.status < 300) {
    return response
      .json()
      .then(typeSerializer.toValueObjectList('CTeamMember'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * retrieving all known users.
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function getTeamMembers(
  configuration: OperationConfiguration = {},
): Promise<Array<CTeamMember>> {
  return pipe(
    getTeamMembersRequest(configuration),
    fetchRequest(configuration),
    getTeamMembersResponse(configuration),
  )();
}

/**
 * retrieving work week for given week, date format: /rest/workweek/YYYY-MM-DD.
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getWorkWeekRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: GetWorkWeekRequestParameters,
): FetchParameters => {
  if (
    requestParameters.fromIsoDateString === null ||
    requestParameters.fromIsoDateString === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.fromIsoDateString was null or undefined when calling getWorkWeek.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/rest/workweek/{from-iso-date-string}`.replace(
    `{${'from-iso-date-string'}}`,
    encodeURIComponent(String(requestParameters.fromIsoDateString)),
  );
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = undefined;

  return {
    input: url,
    init: {
      method: 'GET',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * retrieving work week for given week, date format: /rest/workweek/YYYY-MM-DD.
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const getWorkWeekResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<WorkWeek> => {
  if (response.status >= 200 && response.status < 300) {
    return response.json().then(typeSerializer.toValueObject('WorkWeek'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * retrieving work week for given week, date format: /rest/workweek/YYYY-MM-DD.
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function getWorkWeek(
  requestParameters: GetWorkWeekRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<WorkWeek> {
  return pipe(
    getWorkWeekRequest(configuration),
    fetchRequest(configuration),
    getWorkWeekResponse(configuration),
  )(requestParameters);
}

/**
 * update work done for given week
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const updateWorkWeekRequest = ({
  basePath = '',
  querystringStringify = querystring,
  username,
  password,
  apiKey,
  accessToken,
  headers,
  credentials,
}: RequestConfiguration = {}) => (
  requestParameters: UpdateWorkWeekRequestParameters,
): FetchParameters => {
  if (
    requestParameters.fromIsoDateString === null ||
    requestParameters.fromIsoDateString === undefined
  ) {
    throw new APIRequestError(
      `Required parameter requestParameters.fromIsoDateString was null or undefined when calling updateWorkWeek.`,
    );
  }

  const queryParameters: UrlQueryInput = {};

  const headerParameters: Headers = new Headers(headers);

  headerParameters.set('Content-Type', 'application/json');

  let url: string = `${basePath.replace(
    /\/+$/,
    '',
  )}/rest/workweek/{from-iso-date-string}`.replace(
    `{${'from-iso-date-string'}}`,
    encodeURIComponent(String(requestParameters.fromIsoDateString)),
  );
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    url += '?' + querystringStringify(queryParameters);
  }

  const body = JSON.stringify(
    typeSerializer.toJsonObject('WorkWeek')(requestParameters.workWeek),
  );

  return {
    input: url,
    init: {
      method: 'PUT',
      headers: headerParameters,
      credentials,
      body,
    },
  };
};

/**
 * update work done for given week
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export const updateWorkWeekResponse = (
  configuration: ResponseConfiguration = {},
) => async (response: Response): Promise<number> => {
  if (response.status >= 200 && response.status < 300) {
    return response.text().then(typeSerializer.toValueObject('number'));
  } else {
    switch (response.status.toString()) {
      default:
        throw response;
    }
  }
};

/**
 * update work done for given week
 * @throws {APIRequestError} throw when the request is not correct
 * @throws {APIExceptionError} throw when response is out of 2xx
 * @throws {Response} throw when the response.status is not accepted (fallback throwing)
 * @throws {APISerializeError} throw when fail serialize data (include request and response)
 */
export async function updateWorkWeek(
  requestParameters: UpdateWorkWeekRequestParameters,
  configuration: OperationConfiguration = {},
): Promise<number> {
  return pipe(
    updateWorkWeekRequest(configuration),
    fetchRequest(configuration),
    updateWorkWeekResponse(configuration),
  )(requestParameters);
}
